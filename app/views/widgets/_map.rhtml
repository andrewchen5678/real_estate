<% format_mapaddr=format_address(mapaddr) %>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script type="text/javascript">

  var geocoder;
  var map;
  var markersArray=[];
  var moveListener;
  function initialize() {
    geocoder = new google.maps.Geocoder();
    //var latlng = new google.maps.LatLng(-34.397, 150.644);
    var myOptions = {
      zoom: 16,
      //center: latlng,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      streetViewControl: true,
      navigationControlOptions: {
        style: google.maps.NavigationControlStyle.DEFAULT
      }
    }
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
    codeAddressByString('<%= escape_javascript(format_mapaddr) %>');
  }

  function codeAddressByString(address) {
    var within=$('within').value;
    //var address = document.getElementById("address").value;
    if (geocoder) {
      geocoder.geocode( { 'address': address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          map.setCenter(results[0].geometry.location);
          var m=addMarker(results[0].geometry.location,address);
              if(within>0){
                google.maps.event.removeListener(moveListener);
                //GEvent.removeListener(moveListener);
                new Ajax.Request('/addresses.js?lat='+results[0].geometry.location.lat()+'&lng='+results[0].geometry.location.lng()+'&within='+within, {
                  method:'get',
                  //requestHeaders: {Accept: 'application/json'},
                  onSuccess: function(transport){
                    //alert(point);
                    //document.write('/addresses.js?lat='+point.x+'&lng='+point.y+'&within=15');
                    addrlist = transport.responseText.evalJSON(true);
                    //document.write(transport.responseText);
                    alert(within);
                    alert(address);
                    deleteMarkers();
                    helperListAddress(addrlist);
                    //focusaddress(address,new GLatLng(point.y,point.x));
                  }
                });
              }else{
                updatemapbound(false);
                moveListener=google.maps.event.addListener(map, 'center_changed', function() {
                    //alert('bounds_changed')
                    updatemapbound(true);
                });
              }
          google.maps.event.trigger(m,'click');
          //var marker = new google.maps.Marker({
          //    map: map,
          //    position: results[0].geometry.location
          //});
        } else {
          alert("Geocode was not successful for the following reason: " + status);
        }
      });
    }
  }

    function helperListAddress(addrlist) {

      //if (geocoder) {
      //  geocoder.getLatLng(
      //    address,
      //    function(point) {
      //      if (!point) {
      //        alert(address + " not found");
      //      } else {
        //fenwayPark = new GLatLng(42.345573,-71.098326);
        //alert(point);
              for (var key in addrlist) {
                addMarker(new google.maps.LatLng(addrlist[key].lat,addrlist[key].lng),addrlist[key].address);
              }
              //for (i=0;i<addrlist.length;i++) {
              //  //alert(addrlist[i].address);
              //  markertemp=new GMarker(new GLatLng(addrlist[i].lat,addrlist[i].lng));
              //  helpermarker(map,markertemp,addrlist[i].address);
              //}
            //}
          //}
        //);
      //}
    }

    function focusaddress(address,point){
        map.setCenter(point, 13);
        var marker = new GMarker(point);
        helpermarker(map,marker,address);
        marker.openInfoWindowHtml(address);
    }

    //function helpermarker(map,marker,text){
    //    map.addOverlay(marker);
    //    markersArray.push(marker);
    //    GEvent.addListener(marker, 'click', function() {
    //      // When clicked, open an Info Window
    //      marker.openInfoWindowHtml(text);
    //    });
    //
    //}

function addMarker(location,text) {
    var marker = new google.maps.Marker({
        position: location,
        map: map
    });

    var infowindow = new google.maps.InfoWindow({
        content: text
    });

    google.maps.event.addListener(marker, 'click', function() {
      infowindow.open(map,marker);
    });

    markersArray.push(marker);
    return marker;
}

function deleteMarkers() {
  if (markersArray) {
    for (i in markersArray) {
      markersArray[i].setMap(null);
    }
    markersArray.length = 0;
  }
}

    function updatemapbound(asyn) {
        var bounds = map.getBounds();
        alert(bounds);
        var sw = bounds.getSouthWest();
        var ne = bounds.getNorthEast();

        var sBound = sw.lat();
        var wBound = sw.lng();
        var nBound = ne.lat();
        var eBound = ne.lng();

        new Ajax.Request('/addresses.js?s='+sBound+'&w='+wBound+'&n='+nBound+'&e='+eBound, {
          method:'get',
          asynchronous:asyn,
          //requestHeaders: {Accept: 'application/json'},
          onSuccess: function(transport){
            //alert(point);
            //document.write('/addresses.js?lat='+point.x+'&lng='+point.y+'&within=15');
            addrlist = transport.responseText.evalJSON(true);
            //document.write(transport.responseText);
            //alert(address);
            deleteMarkers();
            helperListAddress(addrlist);
          }
        });
        if(!asyn) alert('should be sync');
            // AJAX call to the database with the map bounds
    }

/*
    var map = null;
    var geocoder = null;
    var myPano;
    var mapControl;
    var markersArray=[];
    var moveListener;

    function initialize() {
      if (GBrowserIsCompatible()) {
        geocoder = new GClientGeocoder();
        myPano = new GStreetviewPanorama(document.getElementById("pano"));
        GEvent.addListener(myPano, "error", handleNoFlash);
        mapControl = new GMapTypeControl();

        map = new GMap2(document.getElementById("map_canvas"));
        map.addControl(mapControl);
        map.addControl(new GLargeMapControl());

        showAddressByID(<%=mapaddr.id%>);

        //moveListener = GEvent.addListener(map, "moveend", function(){updatemapbound(true)});

      }
    }

    function updatemapbound(asyn) {
        var bounds = map.getBounds();
        var sw = bounds.getSouthWest();
        var ne = bounds.getNorthEast();

        var sBound = sw.lat();
        var wBound = sw.lng();
        var nBound = ne.lat();
        var eBound = ne.lng();

        new Ajax.Request('/addresses.js?s='+sBound+'&w='+wBound+'&n='+nBound+'&e='+eBound, {
          method:'get',
          asynchronous:asyn,
          //requestHeaders: {Accept: 'application/json'},
          onSuccess: function(transport){
            //alert(point);
            //document.write('/addresses.js?lat='+point.x+'&lng='+point.y+'&within=15');
            addrlist = transport.responseText.evalJSON(true);
            //document.write(transport.responseText);
            //alert(address);
            clearMarkers();
            for (var key in addrlist) {
              markertemp=new GMarker(new GLatLng(addrlist[key].lat,addrlist[key].lng));
              helpermarker(map,markertemp,addrlist[key].address);
            }
          }
        });

            // AJAX call to the database with the map bounds
    }

    function showAddressByString(address,within){
      //map.clearOverlays();
      if (geocoder) {
        geocoder.getLatLng(
          address,
          function(point) {
            if (!point) {
              alert(address + " not found");
            } else {
              //alert(point);
              if(within>0){
                GEvent.removeListener(moveListener);
                new Ajax.Request(ajaxstring='/addresses.js?lat='+point.y+'&lng='+point.x+'&within='+$('within').value, {
                  method:'get',
                  //requestHeaders: {Accept: 'application/json'},
                  onSuccess: function(transport){
                    //alert(point);
                    //document.write('/addresses.js?lat='+point.x+'&lng='+point.y+'&within=15');
                    addrlist = transport.responseText.evalJSON(true);
                    //document.write(transport.responseText);
                    alert(within);
                    alert(address);

                    helperListAddress(addrlist);
                    focusaddress(address,new GLatLng(point.y,point.x));
                  }
                });
              }else{

                updatemapbound(false);
                focusaddress(address,new GLatLng(point.y,point.x));
                moveListener = GEvent.addListener(map, "moveend", function(){
                  updatemapbound(true);
                });
              }


            }
          }
        );
      }
    }

    function showAddressByID(id,within){
        new Ajax.Request('/addresses.js?address_id='+id+'&within='+within, {
          method:'get',
          //requestHeaders: {Accept: 'application/json'},
          onSuccess: function(transport){
            addrlist = transport.responseText.evalJSON(true);
            //alert(addrlist);
            helperListAddress(addrlist[id].address,new GLatLng(addrlist[id].lat,addrlist[id].lng),addrlist);
          }
        });
    }

    function helperListAddress(addrlist) {
        clearMarkers();
      //if (geocoder) {
      //  geocoder.getLatLng(
      //    address,
      //    function(point) {
      //      if (!point) {
      //        alert(address + " not found");
      //      } else {
        //fenwayPark = new GLatLng(42.345573,-71.098326);
        //alert(point);
              for (var key in addrlist) {
                var markertemp=new GMarker(new GLatLng(addrlist[key].lat,addrlist[key].lng));
                helpermarker(map,markertemp,addrlist[key].address);
              }
              //for (i=0;i<addrlist.length;i++) {
              //  //alert(addrlist[i].address);
              //  markertemp=new GMarker(new GLatLng(addrlist[i].lat,addrlist[i].lng));
              //  helpermarker(map,markertemp,addrlist[i].address);
              //}
            //}
          //}
        //);
      //}
    }

    function focusaddress(address,point){
        map.setCenter(point, 13);
        var marker = new GMarker(point);
        helpermarker(map,marker,address);
        marker.openInfoWindowHtml(address);
    }

    function helpermarker(map,marker,text){
        map.addOverlay(marker);
        markersArray.push(marker);
        GEvent.addListener(marker, 'click', function() {
          // When clicked, open an Info Window
          marker.openInfoWindowHtml(text);
        });
    }

    function clearMarkers(){
      for(i = 0; i < markersArray.length; i++)
      {
              map.removeOverlay(markersArray[i]);
      }

    }

    function handleNoFlash(errorCode) {
      if (errorCode == 603) {
        alert("Error: Flash doesn't appear to be supported by your browser");
        return;
      }
    }
    */
    </script>

     <form action="#" id="mapAddressForm" onsubmit="codeAddressByString(this.addressfield.value); return false">
      <p>
        <input type="text" size="60" name="addressfield" id="addressfield" value="<%=h format_mapaddr %>" />
        <input type="submit" value="Go!" />
<%=select_tag("within", options_for_select([['all inside of the range',0],
      ['within 5 miles',5],
    ['within 10 miles',10],
    ['within 20 miles',20],
    ['within 40 miles',40]],
  (params[:within] || 10)),
  :onchange=>'codeAddressByString($("addressfield").value)'
) %>

      </p>
      <div id="map_canvas" style="width: 500px; height: 300px"></div>
      <div id="pano" style="width: 500px; height: 300px; border-style:solid"></div>
    </form>

<script type="text/javascript">
document.observe("dom:loaded", function() {
  initialize();
});

Event.observe(window, 'unload', function(){
  //alert('calling window unload');
  GUnload();
});
    //jQuery(document).ready(function(){
    //    initialize();
    // });
//jQuery(window).unload(function() {
//  GUnload();
//});

</script>