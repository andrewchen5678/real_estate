<% format_mapaddr=format_address(mapaddr) %>
  <script src="http://maps.google.com/maps?file=api&amp;v=2.x&amp;key=<%=GOOGLE_MAP_API_KEY%>" type="text/javascript"></script>

    <script type="text/javascript">

    var map = null;
    var geocoder = null;
    var myPano;
    var mapControl;
    var gmarkers=new Object();
    var moveListener;
    //var dbmarkers=[];
    var singleMarker;
    var dbAddrList;
    var MyIcon;

    function initialize() {
      if (GBrowserIsCompatible()) {

        MyIcon = new GIcon(); // create a new Google Icon object
        MyIcon.image = "/images/thumbs_up.gif";// image file name
        //MyIcon.iconSize = new GSize(10, 30);// width (px) and height (px)
        MyIcon.iconAnchor = new GPoint(6, 20);// base of the icon
        MyIcon.infoWindowAnchor = new GPoint(0, 0);// info window base

        geocoder = new GClientGeocoder();
        myPano = new GStreetviewPanorama(document.getElementById("pano"));
        GEvent.addListener(myPano, "error", handleNoFlash);
        mapControl = new GMapTypeControl();

        map = new GMap2(document.getElementById("map_canvas"));
        map.addControl(mapControl);
        map.addControl(new GLargeMapControl());

        showAddressByID(<%=mapaddr.id%>,$('within').value);

        //moveListener = GEvent.addListener(map, "moveend", function(){updatemapbound(true)});

      }
    }

    function updatemapbound(asyn) {
        var bounds = map.getBounds();
        var sw = bounds.getSouthWest();
        var ne = bounds.getNorthEast();

        var sBound = sw.lat();
        var wBound = sw.lng();
        var nBound = ne.lat();
        var eBound = ne.lng();

        new Ajax.Request('/addresses.js?s='+sBound+'&w='+wBound+'&n='+nBound+'&e='+eBound+'&type=residential_realties', {
          method:'get',
          asynchronous:asyn,
          //requestHeaders: {Accept: 'application/json'},
          onSuccess: function(transport){
            //alert(point);
            //document.write('/addresses.js?lat='+point.x+'&lng='+point.y+'&within=15');
            addrlist = transport.responseText.evalJSON(true);
            //document.write(transport.responseText);
            //alert('updatemapbound');
            helperListAddress(addrlist);
            //clearDBMarkers();
            //for (var key in addrlist) {
            //  var markertemp=new GMarker(new GLatLng(addrlist[key].lat,addrlist[key].lng));
            //  helperMarker(map,markertemp,addrlist[key].address);
            //  gmarkers.push(markertemp);
            //}
          }
        });

            // AJAX call to the database with the map bounds
    }

    function showAddressByString(address,within){
      //map.clearOverlays();
      if (geocoder) {
        geocoder.getLatLng(
          address,
          function(point) {
            if (!point) {
              alert(address + " not found");
            } else {
              //alert(point);
              if(within>0){
                if(moveListener) GEvent.removeListener(moveListener);
                new Ajax.Request(ajaxstring='/addresses.js?lat='+point.y+'&lng='+point.x+'&within='+within+'&type=residential_realties', {
                  method:'get',
                  //requestHeaders: {Accept: 'application/json'},
                  onSuccess: function(transport){
                    //alert(point);
                    //document.write('/addresses.js?lat='+point.x+'&lng='+point.y+'&within=15');
                    addrlist = transport.responseText.evalJSON(true);
                    //document.write(transport.responseText);
                    //alert(within);
                    //alert(address);

                    helperListAddress(addrlist);
                    focusaddressbypoint(address,new GLatLng(point.y,point.x));
                  }
                });
              }else{

                updatemapbound(false);
                focusaddressbypoint(address,new GLatLng(point.y,point.x));
                //alert(moveListener);
                //var loadlisten=GEvent.addListener(map, "tilesloaded", function(){
                  moveListener = GEvent.addListener(map, "moveend", function(){
                    updatemapbound(true);
                    //GEvent.removeListener(loadlisten);
                  });
                //});

              }


            }
          }
        );
      }
    }

    function showAddressByID(id,within){
      if(within>0){
        if(moveListener) GEvent.removeListener(moveListener);
        new Ajax.Request('/addresses.js?address_id='+id+'&within='+within+'&type=residential_realties', {
          method:'get',
          //requestHeaders: {Accept: 'application/json'},
          onSuccess: function(transport){
            addrlist = transport.responseText.evalJSON(true);
            //alert(addrlist);
            helperListAddress(addrlist);
            //focusaddress(addrlist[id].address,new GLatLng(addrlist[id].lat,addrlist[id].lng));
            focusaddress(id);
          }
        });
      }else{
        alert('show address by id range');
        var point=new GLatLng(<%=mapaddr.lat%>,<%=mapaddr.lng%>);
        myPano.setLocationAndPOV(point);
        map.setCenter(point, 13);
        //helperOpenInfo(gmarkers[hashLatLng(<%=mapaddr.lat%>,<%=mapaddr.lng%>)]);
                updatemapbound(false);
                helperOpenInfo(gmarkers[hashLatLng(<%=mapaddr.lat%>,<%=mapaddr.lng%>)]);
                //focusaddress(id);
                alert(moveListener);
                //var loadlisten=GEvent.addListener(map, "tilesloaded", function(){
                  moveListener = GEvent.addListener(map, "moveend", function(){
                    alert('updatemapbound inside moveListener');
                    updatemapbound(true);
                    //GEvent.removeListener(loadlisten);
                  });
                  alert(moveListener);
      }
    }

    function hashLatLng(lat,lng){
      return lat.toString()+lng.toString();
    }

    function helperListAddress(addrlist) {

              var newMarkers=new Object();
              for (var ak in addrlist) {
                var hashkey=hashLatLng(addrlist[ak].lat,addrlist[ak].lng)

                if(newMarkers[hashkey] && !gmarkers[hashkey]){
                  newMarkers[hashkey].address.push(ak);
                }else{
                  newMarkers[hashkey]=new Object();
                  if(gmarkers[hashkey]){
                    newMarkers[hashkey].marker=gmarkers[hashkey].marker;
                    delete gmarkers[hashkey];
                  }else{
                    var markertemp=new GMarker(new GLatLng(addrlist[ak].lat,addrlist[ak].lng));
                    newMarkers[hashkey].marker=markertemp;
                  }
                  newMarkers[hashkey].address=[];
                  newMarkers[hashkey].address[0]=ak;
                  helperMarker(map,newMarkers[hashkey]);
                }
              }
              //alert(gmarkers.length);
              for(var k in gmarkers){
                  //alert('gmarkers key '+k);
                  if(gmarkers[k]){
                    map.removeOverlay(gmarkers[k].marker);
                  }
              }

              gmarkers=newMarkers;
              dbAddrList=addrlist;
    }

    function focusaddressbypoint(address,point){
      //var doListener=new Boolean(moveListener);
        //if(doListener){
        //  GEvent.removeListener(moveListener);
        //}
        clearSingleMarker();
        singleMarker = new GMarker(point,MyIcon);
        helperMarkerByText(map,singleMarker,address);
        myPano.setLocationAndPOV(point);
        map.setCenter(point, 13);
        singleMarker.openInfoWindowHtml(address);
        //if(doListener){
        //        moveListener = GEvent.addListener(map, "moveend", function(){
        //         updatemapbound(true);
        //        });
        //}
    }

    function focusaddress(id){
      //var doListener=new Boolean(moveListener);
        //if(doListener){
        //  GEvent.removeListener(moveListener);
        //}
        //clearSingleMarker();
        //singleMarker = new GMarker(point,MyIcon);
        //helperMarker(map,singleMarker,address);
        var point=new GLatLng(dbAddrList[id].lat,dbAddrList[id].lng);
        myPano.setLocationAndPOV(point);
        map.setCenter(point, 13);
        //alert(gmarkers[id]);
        helperOpenInfo(gmarkers[hashLatLng(dbAddrList[id].lat,dbAddrList[id].lng)]);
        //if(doListener){
        //        moveListener = GEvent.addListener(map, "moveend", function(){
        //         updatemapbound(true);
        //        });
        //}
    }

    function helperMarkerByText(map,marker,text){
        map.addOverlay(marker);
        GEvent.addListener(marker, 'click', function() {
          // When clicked, open an Info Window
          marker.openInfoWindowHtml(text);
        });
    }


    function helperMarker(map,markerobj){
        map.addOverlay(markerobj.marker);
        GEvent.addListener(markerobj.marker, 'click', function() {
          // When clicked, open an Info Window
          //marker.openInfoWindowHtml(text);
          helperOpenInfo(markerobj);
        });
    }


    function helperOpenInfo(marker){
      var strVar="";
      strVar += "<table>";
      for(var i=0;i<marker.address.length;i++){
        var addressobj=dbAddrList[marker.address[i]];
        strVar += "<tr>";
        strVar += "<td>";
        strVar += addressobj.address;
        strVar += "<\/td>";
        strVar += "<td>";
        strVar += addressobj.residential_realty.realty_type;
        strVar += "<\/td>";
        strVar += "<\/tr>";

        strVar += "<tr>";
        strVar += "<td>";
        strVar += "Bed/bath:";
        strVar += "<\/td>";
        strVar += "<td>";
        strVar += addressobj.residential_realty.num_of_beds+'/'+addressobj.residential_realty.num_bath;
        strVar += "<\/td>";
        strVar += "<\/tr>";

        strVar += "<tr>";
        strVar += "<td>";
        strVar += "<\/td>";
        strVar += "<td>";
        strVar += "<a href='/residential_realties/"+addressobj.residential_realty.id+"'>Detail</a>";
        strVar += "<\/td>";
        strVar += "<\/tr>";
      }
        strVar += "<\/table>";
      marker.marker.openInfoWindowHtml(strVar);
    }

    //function clearDBMarkers(){
    //  for(var i in gmarkers)
    //  {
    //          map.removeOverlay(gmarkers[i]);
    //  }
    //  gmarkers.length=0;
    //
    //}

    function clearSingleMarker(){
      if(singleMarker) map.removeOverlay(singleMarker);
      singleMarker=null;
    }

    function handleNoFlash(errorCode) {
      if (errorCode == 603) {
        alert("Error: Flash doesn't appear to be supported by your browser");
        return;
      }
    }
    </script>

     <form action="#" id="mapAddressForm" onsubmit="showAddressByString(this.addressfield.value,this.within.value); return false">
      <p>
      <div id="mapinput" style="width: 600px;">
        <br/><input type="text" style="width: 600px;" name="addressfield" id="addressfield" value="<%=h format_mapaddr %>" /></div>
        <input type="submit" value="Go!" />
<%=select_tag("within", options_for_select([['all inside of the range',0],
      ['within 5 miles',5],
    ['within 10 miles',10],
    ['within 20 miles',20],
    ['within 40 miles',40]],
  (params[:within] || 10)),
  :onchange=>'showAddressByString($("addressfield").value,this.value)'
) %>

      </p>
      <div id="map_canvas" style="width: 600px; height: 480px"></div>
      <div id="pano" style="width: 600px; height: 480px; border-style:solid"></div>
    </form>

<script type="text/javascript">
document.observe("dom:loaded", function() {
  initialize();
});

Event.observe(window, 'unload', function(){
  //alert('calling window unload');
  GUnload();
});
    //jQuery(document).ready(function(){
    //    initialize();
    // });
//jQuery(window).unload(function() {
//  GUnload();
//});

</script>